// --------------------------------- //
// Project: SpaceGameDev
// Start: Thursday, April 14, 2016
// IDE Version: 14.106


// SETCURRENTDIR("Media") // go to media files

TYPE options_TYPE

	cameraMovementSpeed
	cameraTurboSpeed

ENDTYPE

TYPE mapInfos_TYPE

	sizeX
	sizeY

	offsetX
	offsetY

	markerX
	markerY

ENDTYPE

TYPE system_mouse_TYPE
	x
	y
	b1
	b2
	b1_press
	b2_press
ENDTYPE

TYPE sprite_TYPE
	id
	position AS position_TYPE
ENDTYPE

TYPE position_TYPE
	x
	y
ENDTYPE

TYPE size_TYPE
	width
	length
ENDTYPE

TYPE gui_TYPE

	typ
	button AS button_TYPE

ENDTYPE

TYPE button_TYPE
	text$
	returnID
	position AS position_TYPE
	size AS size_TYPE
ENDTYPE

TYPE mapEditor_TYPE
	active
ENDTYPE

TYPE font_TYPE
	sizeX
	sizeY
ENDTYPE

GLOBAL mouse AS system_mouse_TYPE, mapInfos AS mapInfos_TYPE, options AS options_TYPE, ground[] AS sprite_TYPE, wall[] AS sprite_TYPE, gui[] AS gui_TYPE, mapEditor AS mapEditor_TYPE
GLOBAL font AS font_TYPE


main()


FUNCTION main:
LOCAL guiFeedback
	init()
	loader()
	generateGround()

	WHILE TRUE

		system_mouse()
		system_movement()

		drawGround()
		drawGrid()
		drawMarker()

		drawMenu()

		guiFeedback = gui_update()

		IF guiFeedback > 0
			processFeedback(guiFeedback)
		ENDIF

		//drawCircle(100, 100, 200)



		SHOWSCREEN
	WEND

ENDFUNCTION

FUNCTION init:

	AUTOPAUSE FALSE
	SYSTEMPOINTER TRUE

	mapInfos.sizeX = 32
	mapInfos.sizeY = 32

	options.cameraMovementSpeed = 0.1
	options.cameraTurboSpeed = 0.25

	gui_addButton("Test", 1, 778, 10, 236, 40)

ENDFUNCTION

FUNCTION loader:
LOCAL ok, enumWert, name$

	ok = DOESFILEEXIST("media/file.lst")

	IF ok = TRUE

		OPENFILE(0, "media/file.lst", 1)

		WHILE ENDOFFILE(0) = FALSE

			READLINE 0, name$

			LOADSPRITE name$, enumWert

			INC enumWert, 1

			//LOADSPRITE "media/rect.png", 0
			//LOADSPRITE "media/border.png", 1

		WEND

	ELSE
		END
	ENDIF

	LOADFONT "media/font.png", 0
	checkFont(0)
	SETFONT 0


ENDFUNCTION

FUNCTION checkFont: id

	SETFONT id
	GETFONTSIZE font.sizeX, font.sizeY

ENDFUNCTION

FUNCTION system_mouse:
// ==================
// Mouse Routine v1.3
// ==================
LOCAL x, y, b1, b2, b1_press, b2_press
STATIC b1_tmp, b2_tmp, press_init, press_timer_old

	MOUSESTATE x, y, b1_press, b2_press

		mouse.x = x
		mouse.y = y

	IF b1_press = FALSE
		b1 = FALSE
		press_init = FALSE
	ENDIF
	IF b1_press = TRUE
		b1_tmp = TRUE
		IF press_init = FALSE
			press_timer_old = GETTIMERALL() + 50000
			press_init = TRUE
		ENDIF
	ENDIF
	IF b1_press = FALSE AND b1_tmp = TRUE AND GETTIMERALL() <= press_timer_old
		b1 = TRUE
		b1_tmp = FALSE
	ENDIF

	IF b2_press = FALSE THEN b2 = FALSE
	IF b2_press = TRUE THEN b2_tmp = TRUE
	IF b2_press = FALSE AND b2_tmp = TRUE
		b2 = TRUE
		b2_tmp = FALSE
	ENDIF

	mouse.b1 = b1
	mouse.b2 = b2
	mouse.b1_press = b1_press
	mouse.b2_press = b2_press

ENDFUNCTION

FUNCTION system_movement:
LOCAL turbo

	IF KEY(42) = TRUE
		turbo = options.cameraTurboSpeed
	ELSE
		turbo = 0
	ENDIF

	PRINT turbo, 0, 0

	IF mapInfos.sizeX * 32 > 768
		// Taste A
		IF KEY(30) = TRUE
			INC mapInfos.offsetX, (options.cameraMovementSpeed + turbo) * GETTIMER()
			IF mapInfos.offsetX > 0 THEN mapInfos.offsetX = 0
		ENDIF

		// Taste D
		IF KEY(32) = TRUE
			DEC mapInfos.offsetX, (options.cameraMovementSpeed + turbo) * GETTIMER()
			IF mapInfos.offsetX < (mapInfos.sizeX * 32 - 768) * -1 THEN mapInfos.offsetX = (mapInfos.sizeX * 32 - 768) * -1
		ENDIF
	ENDIF

	IF mapInfos.sizeY * 32 > 768
		// Taste W
		IF KEY(17) = TRUE
			INC mapInfos.offsetY, (options.cameraMovementSpeed + turbo) * GETTIMER()
			IF mapInfos.offsetY > 0 THEN mapInfos.offsetY = 0
		ENDIF

		// Taste S
		IF KEY(31) = TRUE
			DEC mapInfos.offsetY, (options.cameraMovementSpeed + turbo) * GETTIMER()
			IF mapInfos.offsetY < (mapInfos.sizeY * 32 - 768) * -1 THEN mapInfos.offsetY = (mapInfos.sizeY * 32 - 768) * -1
		ENDIF
	ENDIF

ENDFUNCTION

FUNCTION drawCircle: x, y, radius
LOCAL tmpX, tmpY, phi

	FOR phi = 0 TO 359

		 tmpX = x + radius * COS(phi)
		 tmpY = y + radius * SIN(phi)

		SETPIXEL tmpX, tmpY, RGB(255, 255, 255)
	NEXT

ENDFUNCTION

FUNCTION drawGrid:
LOCAL tmpX, tmpY, counter

	FOR tmpY = 0 TO mapInfos.sizeY - 1
		FOR tmpX = 0 TO mapInfos.sizeX - 1


			IF (tmpX * 32 + mapInfos.offsetX) > -32 AND (tmpX * 32 + mapInfos.offsetX) < 768 AND (tmpY * 32 + mapInfos.offsetY) > -32 AND (tmpY * 32 + mapInfos.offsetY) < 768

				DRAWSPRITE 0, tmpX * 32 + mapInfos.offsetX, tmpY * 32 + mapInfos.offsetY

				INC counter, 1

			ENDIF


			IF mouse.x >= tmpX * 32 + mapInfos.offsetX AND mouse.x <= tmpX * 32 + mapInfos.offsetX + 32 AND mouse.y >= tmpY * 32 + mapInfos.offsetY AND mouse.y <= tmpY * 32 + mapInfos.offsetY + 32 AND mouse.x < 768
				setMarker(tmpX * 32 + mapInfos.offsetX, tmpY * 32 + mapInfos.offsetY)
			ENDIF

		NEXT
	NEXT

ENDFUNCTION

FUNCTION generateGround:
LOCAL tmpX, tmpY

	DIM ground[mapInfos.sizeX][mapInfos.sizeY]
	DIM wall[mapInfos.sizeX][mapInfos.sizeY]

	FOR tmpY = 0 TO mapInfos.sizeY - 1
		FOR tmpX = 0 TO mapInfos.sizeX - 1
			ground[tmpX][tmpY].id = 2
			ground[tmpX][tmpY].position.x = tmpX * 32
			ground[tmpX][tmpY].position.y = tmpY * 32

			IF tmpX = 0 OR tmpX = mapInfos.sizeX - 1 OR tmpY = 0 OR tmpY = mapInfos.sizeY - 1
				wall[tmpX][tmpY].id = 3
				wall[tmpX][tmpY].position.x = tmpX * 32
				wall[tmpX][tmpY].position.y = tmpY * 32
			ELSE
				wall[tmpX][tmpY].id = 4
				wall[tmpX][tmpY].position.x = tmpX * 32
				wall[tmpX][tmpY].position.y = tmpY * 32
			ENDIF

		NEXT
	NEXT

ENDFUNCTION



FUNCTION drawGround:

	FOR tmpY = 0 TO mapInfos.sizeY - 1
		FOR tmpX = 0 TO mapInfos.sizeX - 1
			DRAWSPRITE ground[tmpX][tmpY].id, ground[tmpX][tmpY].position.x + mapInfos.offsetX, ground[tmpX][tmpY].position.y + mapInfos.offsetY

			IF wall[tmpX][tmpY].id > 0
				DRAWSPRITE wall[tmpX][tmpY].id, wall[tmpX][tmpY].position.x + mapInfos.offsetX, wall[tmpX][tmpY].position.y + mapInfos.offsetY
			ENDIF

			IF mapEditor.active = TRUE
				IF mouse.x >= tmpX * 32 + mapInfos.offsetX AND mouse.x <= tmpX * 32 + mapInfos.offsetX + 32 AND mouse.y >= tmpY * 32 + mapInfos.offsetY AND mouse.y <= tmpY * 32 + mapInfos.offsetY + 32 AND mouse.x < 768
					IF mouse.b1 = 1 OR mouse.b1_press = 1
						IF wall[tmpX][tmpY].id = 4
							wall[tmpX][tmpY].id = 0
						ENDIF
					ENDIF

					IF mouse.b2 = 1 OR mouse.b2_press
						IF wall[tmpX][tmpY].id = 0
							wall[tmpX][tmpY].id = 4
						ENDIF
					ENDIF
				ENDIF
			ENDIF

		NEXT
	NEXT

ENDFUNCTION

FUNCTION setMarker: x, y

	mapInfos.markerX = x
	mapInfos.markerY = y

ENDFUNCTION

FUNCTION drawMarker:
	IF mouse.x < 768
		DRAWSPRITE 1, mapInfos.markerX, mapInfos.markerY
	ENDIF
ENDFUNCTION

FUNCTION drawMenu:

	STARTPOLY
		POLYVECTOR 768, 0, 0, 0, RGB(32, 32, 32)
		POLYVECTOR 768, 768, 0, 0, RGB(32, 32, 32)
		POLYVECTOR 1024, 768, 0, 0, RGB(0, 0, 0)
		POLYVECTOR 1024, 0, 0, 0, RGB(0, 0, 0)
	ENDPOLY


	//DRAWRECT 768, 0, 256, 768, RGB(32, 32, 32)

ENDFUNCTION

FUNCTION gui_addButton: text$, returnID, x, y, length, width
LOCAL g AS gui_TYPE

	IF x >= 768

		g.typ = 1
		g.button.text$ = text$
		g.button.returnID = returnID
		g.button.position.x = x
		g.button.position.y = y
		g.button.size.length = length
		g.button.size.width = width
		DIMPUSH gui[], g

	ENDIF

ENDFUNCTION

FUNCTION gui_update:
LOCAL buttonColorR, buttonColorG, buttonColorB, returnID

	IF LEN(gui[]) > 0
		FOREACH g IN gui[]
			SELECT g.typ
			CASE 1
				IF mouse.x > g.button.position.x AND mouse.x <= g.button.position.x + g.button.size.length AND mouse.y > g.button.position.y AND mouse.y <= g.button.position.y + g.button.size.width
					IF mouse.b1_press
						buttonColorR = 0
						buttonColorG = 96
						buttonColorB = 160
					ELSE

						buttonColorR = 0
						buttonColorG = 64
						buttonColorB = 128
					ENDIF						
				ELSE
					buttonColorR = 0
					buttonColorG = 32
					buttonColorB = 96				
				ENDIF
				
				DRAWRECT g.button.position.x, g.button.position.y, g.button.size.length, g.button.size.width, RGB(buttonColorR, buttonColorG, buttonColorB)
				gui_printCentralPosition(g.button.text$, g.button.position.x, g.button.position.y, g.button.size.length, g.button.size.width)
					
				IF mouse.b1 = TRUE
					returnID = g.button.returnID
				ENDIF
				
			ENDSELECT
		NEXT
	ENDIF

	IF returnID > 0
		RETURN returnID
	ENDIF

ENDFUNCTION

FUNCTION gui_printCentralPosition: text$, x, y, length, width
LOCAL posX, posY

	posX = x + ((length - (LEN(text$) * font.sizeX)) / 2)
	posY = y + (width - font.sizeY) / 2
	
	PRINT text$, posX, posY
	
ENDFUNCTION

FUNCTION processFeedback: guiFeedback
	IF guiFeedback = 1 THEN END
ENDFUNCTION